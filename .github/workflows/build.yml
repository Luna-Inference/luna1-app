name: Build Flutter App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_macos:
    name: Build Flutter (macOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      - name: Create .env file
        run: |
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" > .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
        working-directory: ./v4/luna_chat
      - run: flutter pub get
        working-directory: ./v4/luna_chat
      - run: flutter build macos
        working-directory: ./v4/luna_chat
      - name: Upload macOS Build
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: v4/luna_chat/build/macos/Build/Products/Release/
          retention-days: 30

  build_windows:
    name: Build Flutter (Windows MSIX)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Create .env file
        run: |
          echo "TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}" > .env
          echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "API_URL=${{ secrets.API_URL }}" >> .env
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
        working-directory: ./v4/luna_chat
      - run: flutter pub get
        working-directory: ./v4/luna_chat
      - run: flutter build windows
        working-directory: ./v4/luna_chat
      - name: Install MSIX package
        run: dart pub add msix
        working-directory: ./v4/luna_chat
      - name: Create MSIX Installer
        run: |
          # Create msix_config.yaml with CI-friendly settings using PowerShell syntax
          $msixConfig = @"
          msix_config:
            display_name: Luna Chat
            publisher_display_name: Luna Inference
            identity_name: com.lunainference.lunachat
            msix_version: 1.0.0.0
            certificate_path: test_certificate.pfx
            certificate_password: ""
            publisher: "CN=LunaInference"
            logo_path: windows/runner/resources/app_icon.ico
            capabilities: 'internetClient,privateNetworkClientServer'
            architecture: x64
            generate_during_build: false
          "@
          
          # Write the configuration to file
          Set-Content -Path "msix_config.yaml" -Value $msixConfig
          
          # Create a test certificate for signing (required for MSIX)
          $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=LunaInference" -KeyUsage DigitalSignature -FriendlyName "LunaInference" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          
          # Export the certificate to a file with a password for security
          $certPassword = ConvertTo-SecureString -String "YourSecurePassword123!" -Force -AsPlainText
          $certBytes = $cert.Export('PFX', $certPassword)
          [System.IO.File]::WriteAllBytes("test_certificate.pfx", $certBytes)
          
          # Import the certificate to the local machine store (non-interactive)
          $pfx = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2(
              "test_certificate.pfx",
              $certPassword,
              [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable -bor 
              [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet
          )
          
          # Add certificate to the trusted people store
          $store = New-Object System.Security.Cryptography.X509Certificates.X509Store(
              [System.Security.Cryptography.X509Certificates.StoreName]::TrustedPeople,
              [System.Security.Cryptography.X509Certificates.StoreLocation]::CurrentUser
          )
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
          try {
              $store.Add($pfx)
          } finally {
              $store.Close()
          }
          
          # Run msix:create with environment variable to skip prompts
          $env:FLUTTER_ROOT = (Get-Command flutter).Source | Split-Path -Parent | Split-Path -Parent
          dart run msix:create --verbose
        shell: pwsh
        working-directory: ./v4/luna_chat
      - name: Get app info for MSIX
        id: app_info_msix
        shell: pwsh
        run: |
          $content = Get-Content pubspec.yaml
          $name = ($content | Select-String "^name:" | ForEach-Object { $_.ToString().Split(':')[1].Trim() })
          $version = ($content | Select-String "^version:" | ForEach-Object { $_.ToString().Split(':')[1].Trim().Split('+')[0] })
          echo "APP_NAME=$name" >> $env:GITHUB_OUTPUT
          echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT
        working-directory: ./v4/luna_chat
      - name: Upload MSIX Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-msix-installer
          path: v4/luna_chat/build/windows/runner/Release/${{ steps.app_info_msix.outputs.APP_NAME }}_${{ steps.app_info_msix.outputs.APP_VERSION }}.msix
          retention-days: 30


  create_macos_dmg:
    name: Create macOS DMG
    runs-on: macos-latest
    needs: build_macos
    steps:
      - uses: actions/checkout@v4
      - name: Download macOS Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: download/macos-build/
      - name: Install create-dmg
        run: npm install --global create-dmg
      - name: Create DMG
        run: |
          # Navigate to the downloaded artifacts directory
          cd download/macos-build
          
          # Find the .app bundle (should be in the current directory after extraction)
          ls -la
          
          # Get the app bundle name (should be the only .app directory)
          APP_BUNDLE=$(find . -maxdepth 1 -name "*.app" -type d | head -n1)
          
          if [ -z "$APP_BUNDLE" ]; then
            echo "Error: No .app bundle found in the downloaded artifacts"
            ls -R
            exit 1
          fi
          
          # Get the app name and version
          APP_NAME=$(basename "$APP_BUNDLE" .app)
          
          # Extract version from the app's Info.plist
          if [ -f "${APP_BUNDLE}/Contents/Info.plist" ]; then
            APP_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "${APP_BUNDLE}/Contents/Info.plist" || echo "1.0.0")
          else
            # Fallback to pubspec version if Info.plist is not accessible
            cd ../..
            APP_VERSION=$(grep '^[[:space:]]*version:' v4/luna_chat/pubspec.yaml | head -n1 | awk '{print $2}' | cut -d '+' -f 1)
            cd download/macos-build
          fi

          echo "APP_NAME: $APP_NAME"
          echo "APP_VERSION: $APP_VERSION"
          echo "APP_BUNDLE: $APP_BUNDLE"

          if [ ! -d "$APP_BUNDLE" ]; then
            echo "Error: App bundle not found at $APP_BUNDLE"
            exit 1
          fi

          # Create DMG in the workflow's root directory
          cd ../..
          
          # Create DMG directly from the app bundle without a temporary directory
          DMG_PATH="${APP_NAME}-${APP_VERSION}.dmg"
          
          # Create a temporary sparse disk image
          TEMP_DMG="temp_${DMG_PATH}"
          
          # Calculate the size needed (in MB) - adding 50% overhead
          SIZE=$(du -sm "download/macos-build/${APP_BUNDLE}" | cut -f1)
          SIZE=$((SIZE * 15 / 10))  # 50% overhead
          
          # Create a sparse disk image with the correct parameter order
          hdiutil create -fs HFS+ -volname "${APP_NAME} ${APP_VERSION}" -fsargs "-c c=64,a=16,e=16" -size ${SIZE}m -format UDSP "${TEMP_DMG}"
          
          # Mount the sparse disk image
          MOUNT_POINT=$(hdiutil attach -readwrite -noverify -noautoopen "${TEMP_DMG}" | grep 'Apple_HFS' | awk '{print $3}')
          
          # Wait for the volume to be mounted
          sleep 2
          
          # Copy the app bundle
          cp -R "download/macos-build/${APP_BUNDLE}" "${MOUNT_POINT}/"
          
          # Set the icon for the DMG if available
          if [ -f "download/macos-build/${APP_BUNDLE}/Contents/Resources/AppIcon.icns" ]; then
            cp "download/macos-build/${APP_BUNDLE}/Contents/Resources/AppIcon.icns" "${MOUNT_POINT}/.VolumeIcon.icns"
            SetFile -c icnC "${MOUNT_POINT}/.VolumeIcon.icns"
            SetFile -a C "${MOUNT_POINT}"
          fi
          
          # Create a simple .DS_Store without background image to save space
          echo '   tell application "Finder"
             tell disk "'${APP_NAME} ${APP_VERSION}'"
               open
               set current view of container window to icon view
               set toolbar visible of container window to false
               set statusbar visible of container window to false
               set the bounds of container window to {400, 100, 800, 400}
               set theViewOptions to the icon view options of container window
               set arrangement of theViewOptions to not arranged
               set icon size of theViewOptions to 72
               set position of item "'${APP_BUNDLE}'" of container window to {200, 100}
               update without registering applications
               delay 2
               close
             end tell
           end tell' > "${MOUNT_POINT}/.DS_Store"
          
          # Set permissions
          chmod -Rf go-w "${MOUNT_POINT}"
          
          # Eject the disk image
          hdiutil detach "${MOUNT_POINT}"
          
          # Convert to compressed read-only DMG
          hdiutil convert "${TEMP_DMG}" -format UDZO -o "${DMG_PATH}" -imagekey zlib-level=9
          
          # Clean up
          rm -f "${TEMP_DMG}"
        working-directory: .
      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: "*.dmg"
          retention-days: 30

  package_windows_build:
    name: Package Windows Build
    runs-on: windows-latest
    needs: build_windows
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: v1/build/windows/x64/runner/Release/
      - name: Get app info
        id: app_info
        shell: pwsh
        run: |
          $content = Get-Content v1/pubspec.yaml
          $name = ($content | Select-String "^name:" | ForEach-Object { $_.ToString().Split(':')[1].Trim() })
          $version = ($content | Select-String "^version:" | ForEach-Object { $_.ToString().Split(':')[1].Trim().Split('+')[0] })
          echo "APP_NAME=$name" >> $env:GITHUB_OUTPUT
          echo "APP_VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Building $name version $version"
        working-directory: .
      - name: Create Zip Archive
        run: |
          Compress-Archive -Path v1/build/windows/x64/runner/Release/* -DestinationPath "${{ steps.app_info.outputs.APP_NAME }}-${{ steps.app_info.outputs.APP_VERSION }}-windows.zip"
        shell: pwsh
      - name: Upload Windows Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: "*.zip"
          retention-days: 30